use std::fs::{create_dir_all, File};
use std::io::Write;

pub fn write_endpoint(method_lower: &str, method_upper: &str, raw_path: &str, struct_name: &str) {
  create_dir_all(format!("../src/api/{raw_path}/")).unwrap();
  let mut file = File::create(format!("../src/api/{raw_path}/{method_lower}.ts")).unwrap();
  file.write_all(format_contents(method_upper, raw_path, struct_name).as_bytes()).unwrap();
}

fn format_contents(method_upper: &str, raw_path: &str, struct_name: &str) -> String {
  let mut path = raw_path.to_string();
  let mut nestings = 0;
  let mut is_dir = false;

  while path.starts_with('/') {
    path.remove(0);
  }

  let path_chars = path.clone();
  for (i, c) in path_chars.chars().enumerate() {
    match c {
      '/' => if is_dir {
        nestings += 1;
        is_dir = false;
      } else {
        path.remove(i);
      },
      '.' => {
        path.remove(i);
      }
      _ => {
        is_dir = true;
      }
    }
  }

  let mut pathreturn = String::new();
  for _ in 0..nestings {
    pathreturn.push_str("../");
  }

  format!(r#"
// This file was generated by [sveru]. Do not edit this file manually.
import {{ request_inner, type ApiResponse }} from '$lib/sveru/request';
import type {{ {struct_name} as Method }} from '../../../{pathreturn}api/bindings/{path}/{method_upper}.ts';

export default async function endpoint(
  in_val: Method['in_type'],
  query: Method['query_type']
): ApiResponse<Method['out_data_type']> {{
	return request_inner("{method_upper}", "{path}", in_val, query);
}}
"#)
}
